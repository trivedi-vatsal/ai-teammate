name: Release Action

on:
  workflow_dispatch:
    # Allow deployment of release branches - pattern will be validated in job
    branches:
      - "release/v*"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          VERSION=${BRANCH_NAME#release/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"

      - name: Check and delete existing release and tag
        id: check_release
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          echo "Checking for existing release and tag: ${VERSION}"
          
          # Check if release exists and delete it
          if gh release view "${VERSION}" 2>/dev/null; then
            echo "Release ${VERSION} exists, deleting it..."
            gh release delete "${VERSION}" --yes
            echo "deleted_release=true" >> $GITHUB_OUTPUT
          else
            echo "No existing release found for ${VERSION}"
            echo "deleted_release=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if tag exists and delete it
          if git ls-remote --tags origin "${VERSION}" | grep -q "${VERSION}"; then
            echo "Tag ${VERSION} exists, deleting it..."
            git push origin --delete "${VERSION}"
            echo "deleted_tag=true" >> $GITHUB_OUTPUT
          else
            echo "No existing tag found for ${VERSION}"
            echo "deleted_tag=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Prepare release files
        run: |
          # Create a release directory with built files
          mkdir -p release-files
          cp -r dist/* release-files/
          cp action.yml release-files/
          # Update the main path in the copied action.yml
          sed -i 's|main: "dist/index.js"|main: "index.js"|g' release-files/action.yml

      - name: Commit built files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Add release files to git
          git add release-files/
          git commit -m "Build action for release" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version.outputs.version }}
          release_name: Release ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-files/index.js
          asset_name: index.js
          asset_content_type: application/javascript

      - name: Upload Action YAML
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-files/action.yml
          asset_name: action.yml
          asset_content_type: text/yaml


