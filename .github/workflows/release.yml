name: Release Action

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: "Custom version (only if version_type is custom)"
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate release branch name
        run: |
          BRANCH="${{ github.ref_name }}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "$BRANCH" == "main" ]]; then
            echo "‚úÖ Manual dispatch from main branch allowed"
          elif [[ "$BRANCH" =~ ^release/v[0-9]+(\.[0-9]+){2}(-[A-Za-z0-9.-]+)?$ ]]; then
            echo "‚úÖ Valid release branch: $BRANCH"
          else
            echo "::error::Invalid branch for release. Use 'main' for manual dispatch or 'release/v<semver>' (e.g., release/v1.2.3). Current: $BRANCH"
            exit 1
          fi

      - name: Determine version
        id: extract_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.ref_name }}" == "main" ]]; then
            LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "v0.0.0")
            echo "Latest tag found: $LATEST_TAG"
            CURRENT_VERSION=${LATEST_TAG#v}
            if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
              CURRENT_VERSION="0.0.0"
            fi

            case "${{ github.event.inputs.version_type }}" in
              "patch")
                NEW_VERSION=$(node -p "const v='$CURRENT_VERSION'.split('-')[0].split('.'); v[2]++; 'v'+v.join('.') ")
                ;;
              "minor")
                NEW_VERSION=$(node -p "const v='$CURRENT_VERSION'.split('-')[0].split('.'); v[1]++; v[2]=0; 'v'+v.join('.') ")
                ;;
              "major")
                NEW_VERSION=$(node -p "const v='$CURRENT_VERSION'.split('-')[0].split('.'); v[0]++; v[1]=0; v[2]=0; 'v'+v.join('.') ")
                ;;
              "custom")
                CUSTOM_VER="${{ github.event.inputs.custom_version }}"
                if [[ -z "$CUSTOM_VER" || ! "$CUSTOM_VER" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
                  echo "::error::Custom version must be x.y.z or x.y.z-suffix"
                  exit 1
                fi
                NEW_VERSION="v$CUSTOM_VER"
                ;;
              *)
                echo "::error::Invalid version_type: ${{ github.event.inputs.version_type }}"
                exit 1
                ;;
            esac

            echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "Calculated version: $NEW_VERSION (latest: $LATEST_TAG)"
          else
            VERSION="${{ github.ref_name#release/ }}"
            if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
              echo "::error::Invalid version format in branch: $VERSION"
              exit 1
            fi
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"
            echo "Extracted version from branch: $VERSION"
          fi

      - name: Remove existing release, tag, and branch if present
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          RELEASE_BRANCH="release/$VERSION"

          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "Deleting existing release $VERSION"
            gh release delete "$VERSION" --yes
          fi

          if git ls-remote --tags origin "refs/tags/$VERSION" | grep -q "$VERSION"; then
            echo "Deleting remote tag $VERSION"
            git push origin --delete "$VERSION"
          fi

          if git ls-remote --heads origin "$RELEASE_BRANCH" | grep -q "$RELEASE_BRANCH"; then
            echo "Deleting remote branch $RELEASE_BRANCH"
            git push origin --delete "$RELEASE_BRANCH"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        env:
          CI: true

      - name: Build
        run: npm run build

      - name: Verify build output
        run: |
          test -f dist/index.js || { echo "::error::dist/index.js missing"; exit 1; }
          echo "‚úÖ Build output verified"

      - name: Commit built files to release branch
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -f dist/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(release): prepare for $VERSION" --no-verify
            if [[ "${{ github.ref_name }}" == "main" ]]; then
              RELEASE_BRANCH="release/$VERSION"
              git checkout -b "$RELEASE_BRANCH"
              git push origin "$RELEASE_BRANCH"
            else
              git push origin HEAD:${{ github.ref_name }} --force
            fi
          fi

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          gh release create "$VERSION" \
            --title "AI Teammate $VERSION" \
            --target "${GITHUB_SHA}" \
            --generate-notes \
            --notes "ü§ñ AI Teammate - PR Review Action

          Features:
          - üîç Pure code analysis
          - ü§ñ Azure OpenAI powered reviews
          - üìä Configurable depth
          - üîß Customizable
          - üí¨ Auto PR comments"
          echo "‚úÖ Release $VERSION created"

      - name: Update marketplace tags
        run: |
          git tag -f latest "${GITHUB_SHA}"
          git push origin latest --force
          echo "‚úÖ Marketplace tag 'latest' updated"
