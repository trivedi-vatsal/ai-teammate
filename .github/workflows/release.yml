name: Release Action

on:
  workflow_dispatch:
    # Allow deployment of release branches - pattern will be validated in job
    branches:
      - "release/v*"

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate release branch name
        run: |
          BRANCH="${{ github.ref_name }}"
          # Expect: release/v<semver>, e.g. release/v1.2.3 or release/v1.2.3-beta.1
          if [[ ! "$BRANCH" =~ ^release/v[0-9]+(\.[0-9]+){2}(-[A-Za-z0-9.-]+)?$ ]]; then
            echo "::error::This workflow must be run from a branch named release/v<semver> (e.g., release/v1.2.3). Current: $BRANCH"
            exit 1
          fi

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          VERSION=${BRANCH_NAME#release/}
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Extracted version: ${VERSION}"

      - name: Remove existing release and tag if present
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          echo "Checking for existing release/tag: $VERSION"

          # If release exists, delete it
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "Release $VERSION exists, deleting…"
            gh release delete "$VERSION" --yes
          else
            echo "No existing release."
          fi

          # Ensure we have up-to-date tag info
          git fetch --tags --quiet

          # If tag exists (remote), delete it
          if git ls-remote --tags origin "refs/tags/$VERSION" | grep -q "$VERSION"; then
            echo "Tag $VERSION exists on origin, deleting…"
            git push origin --delete "$VERSION"
          else
            echo "No existing remote tag."
          fi

          # If tag exists locally, delete it
          if git rev-parse -q --verify "refs/tags/$VERSION" >/dev/null; then
            git tag -d "$VERSION"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Verify build output
        run: |
          test -f dist/index.js || { echo "::error::dist/index.js not found. Ensure your build outputs to dist/"; exit 1; }

      - name: Commit built files to the release branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Force-add dist even if it's gitignored (common in Actions repos)
          git add -f dist/
          git commit -m "chore(release): build for ${{ steps.extract_version.outputs.version }}" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }}

      - name: Create GitHub Release (and tag)
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          # Create a release pointing at the current commit of this branch.
          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --target "${GITHUB_SHA}" \
            --generate-notes
          echo "Release $VERSION created."
